let Joi,CustomErrorHandler,RefreshToken,User,bcrypt,JwtService,REFRESH_SECRET;_324‍.x([["default",()=>_324‍.o]]);_324‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_324‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_324‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_324‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_324‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_324‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const registerController={
   async register(req,res,next){

        const registerSchema=Joi.object({
            name: Joi.string().min(3).max(30).required(),
            email: Joi.string().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}')).required(),
            repeat_password:Joi.ref('password')
        });

        const {error}=registerSchema.validate(req.body);


        if(error){
            return next(error);
            
        }

        try{
            const exist= await User.exists({email: req.body.email});
            if(exist){
                return next(CustomErrorHandler.alreadyExist('This email is already in use'));
            }



        }catch(err){
            return next(err);
        }

       

        const {name, email, password}=req.body;
        const hashedPassword=await bcrypt.hash(password, 10);
        const user=new User({
            
                name,
                email,
                password:hashedPassword
            
        });
        let access_token;
        let refresh_token;
        try{
            const result= await user.save();

             access_token= JwtService.sign({_id: result._id, role: result.role});
             refresh_token= JwtService.sign({_id: result._id, role: result.role},'1y',REFRESH_SECRET);

             await RefreshToken.create({token:refresh_token});




        }catch(err){
            return next(err);
        }


            res.json({access_token,refresh_token});
    }
}

_324‍.d(registerController);