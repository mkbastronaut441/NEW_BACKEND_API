let Joi,RefreshToken,User,CustomErrorHandler,JwtService,REFRESH_SECRET;_dec‍.x([["default",()=>_dec‍.o]]);_dec‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_dec‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_dec‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_dec‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_dec‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);





const refreshController={
    async refresh(req,res,next){
        const refreshSchema=Joi.object({
            refresh_token: Joi.string().required(),
            
         });

         const {error}=refreshSchema.validate(req.body);

         if(error){
            return next()
         }
         let refreshtoken;
         try{
            refreshtoken=await RefreshToken.findOne({token:req.body.refresh_token});

            if(!refreshtoken){
                return next(CustomErrorHandler.unAuthorized('Invalid refresh token'));
            }

            let userId;
            try{
                const {_id}=await JwtService.verify(refreshtoken.token, REFRESH_SECRET);
                userId=_id;
            }catch(err){
                return next(CustomErrorHandler.unAuthorized('Invalid refresh token'));
            }

            const user=await User.findOne({_id: userId});
            if(!user){
                return next(CustomErrorHandler.unAuthorized('No user found'));
            }

            const access_token=JwtService.sign({_id:user._id, role:user.role});
            const refresh_token=JwtService.sign({_id:user._id, role:user.role},'1y', REFRESH_SECRET);

            await RefreshToken.create({token:refresh_token});
            res.json({access_token, refresh_token});



         }catch(err){
            return next(new Error('something went wrong' + err.messsage));
         }
    }
}

_dec‍.d(refreshController);